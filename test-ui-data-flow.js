// Test the complete data flow: Database ‚Üí API ‚Üí React UI
const axios = require('axios');

async function testUIDataFlow() {
    console.log('üß™ Testing Complete UI Data Flow: SAM.gov ‚Üí Database ‚Üí API ‚Üí React\n');
    
    try {
        console.log('üìä DASHBOARD DATA VERIFICATION:');
        console.log('=====================================');
        
        // Test the exact endpoints the React Dashboard calls
        const healthResponse = await axios.get('http://localhost:3000/health');
        console.log(`‚úÖ Health Status: ${healthResponse.data.status}`);
        console.log(`üìà Total Opportunities: ${healthResponse.data.opportunities}`);
        
        const statsResponse = await axios.get('http://localhost:3000/api/statistics');
        const stats = statsResponse.data.data.overview;
        console.log(`üí∞ Total Contract Value: $${parseFloat(stats.total_value).toLocaleString()}`);
        console.log(`üìä Average Award: $${parseFloat(stats.avg_value).toLocaleString()}`);
        console.log(`üèÜ Largest Contract: $${parseFloat(stats.max_value).toLocaleString()}`);
        
        console.log('\nüìã OPPORTUNITIES PAGE DATA:');
        console.log('=====================================');
        
        const oppsResponse = await axios.get('http://localhost:3000/api/opportunities');
        const opportunities = oppsResponse.data.data;
        
        console.log(`üìÑ Total Opportunities Available: ${oppsResponse.data.total}`);
        console.log('\nüèóÔ∏è Construction Contracts in Dashboard:');
        
        opportunities.forEach((opp, index) => {
            console.log(`\n${index + 1}. ${opp.title.substring(0, 60)}...`);
            console.log(`   üí∞ Award: $${opp.award_amount.toLocaleString()}`);
            console.log(`   üè¢ Awardee: ${opp.awardee_name}`);
            console.log(`   üèõÔ∏è  Department: ${opp.department}`);
            console.log(`   üè∑Ô∏è  NAICS: ${opp.naics_code}`);
            console.log(`   üìÖ Posted: ${new Date(opp.posted_date).toLocaleDateString()}`);
        });
        
        console.log('\nüéØ NAICS FILTERING TEST:');
        console.log('=====================================');
        
        const naicsResponse = await axios.get('http://localhost:3000/api/opportunities?naics=236220');
        console.log(`üèóÔ∏è NAICS 236220 (Commercial Construction): ${naicsResponse.data.total} opportunities`);
        console.log('   (This is what users see when filtering by Construction in the UI)');
        
        console.log('\nüíº SALES DASHBOARD DATA:');
        console.log('=====================================');
        
        const salesResponse = await axios.get('http://localhost:3000/api/sales/opportunities');
        const salesOpps = salesResponse.data.data;
        
        console.log(`üéØ Sales Qualified Contracts (‚â•$100K): ${salesResponse.data.total}`);
        console.log('\nüí∞ High-Value Opportunities (Sales Priority Order):');
        
        salesOpps.slice(0, 4).forEach((opp, index) => {
            const priority = opp.award_amount >= 50000000 ? 'HIGH' : 
                           opp.award_amount >= 10000000 ? 'MEDIUM' : 'LOW';
            console.log(`\n${index + 1}. $${opp.award_amount.toLocaleString()} - ${priority} PRIORITY`);
            console.log(`   üìÑ ${opp.title.substring(0, 50)}...`);
            console.log(`   üè¢ ${opp.awardee_name}`);
            console.log(`   üèõÔ∏è  ${opp.department}`);
            if (opp.sales_score) console.log(`   üìä Sales Score: ${opp.sales_score}/100`);
        });
        
        console.log('\nüîÑ SYNC FUNCTIONALITY TEST:');
        console.log('=====================================');
        
        const syncResponse = await axios.post('http://localhost:3000/api/sync', {
            naics_codes: ['236220'],
            dry_run: true
        });
        
        if (syncResponse.data.success) {
            console.log('‚úÖ Manual Sync Trigger: Working');
            console.log(`üìÖ Sync Status: ${syncResponse.data.data.status}`);
            console.log('   (Users can trigger data refresh from the UI)');
        }
        
        console.log('\nüåê REACT UI ACCESS INSTRUCTIONS:');
        console.log('=====================================');
        console.log('1. Open browser: http://localhost:3001');
        console.log('2. You should see the Eyrus SAM Dashboard');
        console.log('3. Navigate through pages to see this data:');
        console.log('   ‚Ä¢ Dashboard: Statistics and overview');
        console.log('   ‚Ä¢ Opportunities: Browse all 4 contracts');
        console.log('   ‚Ä¢ Sales: High-value contract prioritization');
        console.log('   ‚Ä¢ Sync: Manual data refresh options');
        
        console.log('\nüéØ WHAT TO EXPECT IN THE UI:');
        console.log('=====================================');
        console.log('‚úÖ Professional dashboard with real SAM.gov data');
        console.log('‚úÖ 4 construction contracts ($15M - $88M range)');
        console.log('‚úÖ NAICS 236220 filtering works');
        console.log('‚úÖ Search by company names (CLARK, FLOYD, RECCO, COSTANZO)');
        console.log('‚úÖ Department filtering (DoD, Veterans Affairs)');
        console.log('‚úÖ Sales qualification for all contracts');
        console.log('‚úÖ Real-time health monitoring');
        console.log('‚úÖ Manual sync operations');
        
        console.log('\nüöÄ UI TESTING CHECKLIST:');
        console.log('=====================================');
        console.log('‚ñ° Dashboard shows $145M+ total contract value');
        console.log('‚ñ° All 4 opportunities visible in Opportunities page');
        console.log('‚ñ° NAICS 236220 filter returns all 4 contracts');
        console.log('‚ñ° Sales page shows contracts sorted by value');
        console.log('‚ñ° Search finds relevant results');
        console.log('‚ñ° Manual sync triggers successfully');
        console.log('‚ñ° Navigation between pages works smoothly');
        console.log('‚ñ° Mobile responsive design works');
        
    } catch (error) {
        console.error('‚ùå UI Data Flow Test Failed:', error.message);
        console.log('\nüîß Troubleshooting:');
        console.log('1. Check if API server running: curl http://localhost:3000/health');
        console.log('2. Check if React app running: curl http://localhost:3001');
        console.log('3. Check browser console for errors (F12)');
    }
}

testUIDataFlow();